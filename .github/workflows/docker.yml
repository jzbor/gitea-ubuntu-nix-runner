#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['latest']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ${{ matrix.runner }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    strategy:
      matrix:
        base: [ "latest", "ubuntu-latest", "ubuntu-24.04", "debian-stable-slim" ]
        runner: [ "ubuntu-24.04", "ubuntu-24.04-arm" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine base image and architecture
        id: determine
        run: |
          if [ "${{ matrix.base }}" = "latest" ]; then echo "img=gitea/runner-images:ubuntu-latest-slim" >> "$GITHUB_OUTPUT"; \
          elif [ "${{ matrix.base }}" = "ubuntu-latest" ]; then echo "img=gitea/runner-images:ubuntu-latest" >> "$GITHUB_OUTPUT"; \
          elif [ "${{ matrix.base }}" = "ubuntu-24.04" ]; then echo "img=gitea/runner-images:ubuntu-24.04" >> "$GITHUB_OUTPUT"; \
          elif [ "${{ matrix.base }}" = "debian-stable-slim" ]; then echo "img=debian:stable-slim" >> "$GITHUB_OUTPUT"; \
          else echo "Error: missing image spec"; false; fi

          if [ "${{ matrix.runner }}" = "ubuntu-24.04-arm" ]; then echo "arch=arm64" >> "$GITHUB_OUTPUT"; \
          else echo "arch=amd64" >> "$GITHUB_OUTPUT"; fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Print labels and names
        run: |
          echo "tags: ${{ matrix.base }}"
          echo "BASE_IMG: ${{ steps.determine.outputs.img }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: BASE_IMG=${{ steps.determine.outputs.img }}
          push: true
          platforms: linux/${{ steps.determine.outputs.arch }}
          tags: ghcr.io/jzbor/gitea-ubuntu-nix-runner:${{ matrix.base }}-${{ steps.determine.outputs.arch }}
          # labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  remove-old-versions:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'
